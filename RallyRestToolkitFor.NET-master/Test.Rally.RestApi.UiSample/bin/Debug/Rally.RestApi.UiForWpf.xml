<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rally.RestApi.UiForWpf</name>
    </assembly>
    <members>
        <member name="T:Rally.RestApi.UiForWpf.CustomWpfControlType">
            <summary>
            A list of control types that can be replaced by custom controls. 
            </summary>
        </member>
        <member name="F:Rally.RestApi.UiForWpf.CustomWpfControlType.Buttons">
            <summary>
            Replaces the default Button with a custom one. The replacement button must extend from <see cref="T:System.Windows.Controls.Button"/>.
            </summary>
        </member>
        <member name="F:Rally.RestApi.UiForWpf.CustomWpfControlType.TabControl">
            <summary>
            Replaces the default tab control with a custom one. The replacement tab control must extend from <see cref="T:System.Windows.Controls.Primitives.Selector"/>.
            </summary>
        </member>
        <member name="F:Rally.RestApi.UiForWpf.CustomWpfControlType.TabItem">
            <summary>
            Replaces the default tab item with a custom one. The replacement tab item control must extend from <see cref="T:System.Windows.Controls.HeaderedContentControl"/>.
            </summary>
        </member>
        <member name="T:Rally.RestApi.UiForWpf.LoginWindow">
            <summary>
            Interaction logic for LoginWindow.xaml
            </summary>
        </member>
        <member name="M:Rally.RestApi.UiForWpf.LoginWindow.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Rally.RestApi.UiForWpf.LoginWindow.UpdateLoginState">
            <summary>
            Updates the login state to show the correct buttons.
            </summary>
        </member>
        <member name="M:Rally.RestApi.UiForWpf.LoginWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Rally.RestApi.UiForWpf.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Rally.RestApi.UiForWpf.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Rally.RestApi.UiForWpf.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Rally.RestApi.UiForWpf.RestApiAuthMgrWpf">
            <summary>
            A WPF based authentication manager.
            </summary>
        </member>
        <member name="M:Rally.RestApi.UiForWpf.RestApiAuthMgrWpf.#ctor(System.String,System.String,Rally.RestApi.Auth.IEncryptionRoutines,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="applicationToken">An application token to be used as the file name to store data as. Each 
            consuming application should use a unique name in order to ensure that the user credentials are not 
            overwritten by other applications.</param>
            <param name="encryptionKey">The encryption key, or salt, to be used for any encryption routines. This salt 
            should be different for each user, and not the same for everyone consuming the same application. Only used 
            for UI support.</param>
            <param name="encryptionRoutines">The encryption routines to use for encryption/decryption of data. Only used for UI support.</param>
            <param name="webServiceVersion">The version of the WSAPI API to use.</param>
            <example>
            <code language="C#">
            // You must define your own private application token. This ensures that your login details are not overwritten by someone else.
            string applicationToken = "RallyRestAPISample";
            // You must set a user specific salt for encryption.
            string encryptionKey = "UserSpecificSaltForEncryption";
            // You must define your own encryption routines.
            IEncryptionRoutines encryptionUtilities = new EncryptionUtilities();
            
            // Instantiate authorization manager
            wpfAuthMgr = new RestApiAuthMgrWpf(applicationToken, encryptionKey, encryptionUtilities);
            </code>
            </example>
        </member>
        <member name="M:Rally.RestApi.UiForWpf.RestApiAuthMgrWpf.SetLogo(System.Windows.Media.ImageSource,System.Windows.Media.ImageSource)">
            <summary>
            Sets the logo used in the user controls.
            </summary>
            <param name="logo">The image to use as a logo.</param>
            <param name="icon">The image to use as a window icon.</param>
            <example>
            <code language="C#">
            // ImageResources is a resource file that the logo has been added to.
            Bitmap bitMap = ImageResources.Logo;
            RestApiAuthMgrWpf.SetLogo(GetImageSource(bitMap));
            </code>
            This is a sample helper method for converting a Bitmap to an <see cref="T:System.Windows.Media.ImageSource"/>.
            <code language="C#">
            public static media.ImageSource GetImageSource(Bitmap image)
            {
            	return Imaging.CreateBitmapSourceFromHBitmap(
            										image.GetHbitmap(),
            										IntPtr.Zero,
            										Int32Rect.Empty,
            										BitmapSizeOptions.FromEmptyOptions());
            }
            </code>
            </example>
        </member>
        <member name="M:Rally.RestApi.UiForWpf.RestApiAuthMgrWpf.ShowUserLoginWindowInternal">
            <summary>
            Opens the window that displays the SSO URL to the user.
            </summary>
        </member>
        <member name="M:Rally.RestApi.UiForWpf.RestApiAuthMgrWpf.OpenSsoPageInternal(System.Uri)">
            <summary>
            Opens the specified SSO URL to the user.
            </summary>
            <param name="ssoUrl">The Uri that the user was redirected to in order to perform their SSO authentication.</param>
        </member>
        <member name="M:Rally.RestApi.UiForWpf.RestApiAuthMgrWpf.ReportSsoResultsToMgr(System.Boolean,System.String,System.String)">
            <summary>
            Reports the results of an SSO action.
            </summary>
            <param name="success">Was SSO authentication completed successfully?</param>
            <param name="rallyServer">The server that the ZSessionID is for.</param>
            <param name="zSessionID">The zSessionID that was returned from Rally.</param>
        </member>
        <member name="M:Rally.RestApi.UiForWpf.RestApiAuthMgrWpf.NotifyLoginWindowSsoComplete(Rally.RestApi.RallyRestApi.AuthenticationResult,Rally.RestApi.RallyRestApi)">
            <summary>
            Notifies the login window that SSO has been completed.
            </summary>
            <param name="authenticationResult">The current state of the authentication process. <see cref="T:Rally.RestApi.RallyRestApi.AuthenticationResult"/></param>
            <param name="api">The API that was authenticated against.</param>
        </member>
        <member name="M:Rally.RestApi.UiForWpf.RestApiAuthMgrWpf.PerformAuthenticationCheck(System.String@)">
            <summary>
            Performs an authentication check against Rally with the specified credentials
            </summary>
        </member>
        <member name="M:Rally.RestApi.UiForWpf.RestApiAuthMgrWpf.PerformLogout">
            <summary>
            Performs an logout from Rally.
            </summary>
        </member>
        <member name="M:Rally.RestApi.UiForWpf.RestApiAuthMgrWpf.SetCustomControlType(Rally.RestApi.UiForWpf.CustomWpfControlType,System.Type)">
            <summary>
            Sets a custom control for the specified control type. Please see the
            enumeration help for what the types must extend from in order to work.
            </summary>
            <param name="customWpfControlType">The control type that we want to use a custom control for.</param>
            <param name="type">The type of the control to use for the specified customWpfControlType.</param>
            <example>
            <code language="C#">
            RestApiAuthMgrWpf.SetCustomControlType(CustomWpfControlType.Buttons, typeof(CustomButton));
            </code>
            </example>
        </member>
        <member name="M:Rally.RestApi.UiForWpf.RestApiAuthMgrWpf.GetCustomControlType(Rally.RestApi.UiForWpf.CustomWpfControlType)">
            <summary>
            Gets a custom control for the specified control type. 
            </summary>
        </member>
        <member name="P:Rally.RestApi.UiForWpf.RestApiAuthMgrWpf.AllowIdpBasedSso">
            <summary>
            Should IDP Based SSO be allowed? This is known to have quite a few JavaScript 
            errors and is therefore defaulted to off.
            </summary>
        </member>
        <member name="E:Rally.RestApi.UiForWpf.RestApiAuthMgrWpf.WindowStateChanged">
            <summary>
            An event that notifies when a window has changed state.
            <para>You will need to listen to this event if you need to notify your parent application 
            that you have windows open, such as if you are developing an Office plug-in and need to 
            set the application interactive mode.</para>
            <code>
            bool isWindowOpen;
            Globals.ThisAddIn.Application.Interactive = isWindowOpen;
            </code>
            </summary>
        </member>
        <member name="T:Rally.RestApi.UiForWpf.WindowTypeOption">
            <summary>
            The type of window that we are sending information about.
            </summary>
        </member>
        <member name="F:Rally.RestApi.UiForWpf.WindowTypeOption.Login">
            <summary>
            The login window.
            </summary>
        </member>
        <member name="F:Rally.RestApi.UiForWpf.WindowTypeOption.SsoLogin">
            <summary>
            The SSO login window.
            </summary>
        </member>
        <member name="T:Rally.RestApi.UiForWpf.WindowStateOption">
            <summary>
            Shows the state of a window.
            </summary>
        </member>
        <member name="F:Rally.RestApi.UiForWpf.WindowStateOption.Open">
            <summary>
            The window is open.
            </summary>
        </member>
        <member name="F:Rally.RestApi.UiForWpf.WindowStateOption.Closed">
            <summary>
            The window is closed.
            </summary>
        </member>
        <member name="T:Rally.RestApi.UiForWpf.WindowStateChangedEvent">
            <summary>
            A delegate to indicate that the state of a window has been changed.
            </summary>
        </member>
        <member name="T:Rally.RestApi.UiForWpf.SsoWindow">
            <summary>
            Interaction logic for SsoWindow.xaml
            </summary>
        </member>
        <member name="M:Rally.RestApi.UiForWpf.SsoWindow.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Rally.RestApi.UiForWpf.SsoWindow.ShowSsoPage(Rally.RestApi.UiForWpf.RestApiAuthMgrWpf,System.Uri)">
            <summary>
            Shows the specified SSO URL to the user.
            </summary>
        </member>
        <member name="M:Rally.RestApi.UiForWpf.SsoWindow.GetUriCookieContainer(System.Uri)">
            <summary>
            Gets the URI cookie container.
            </summary>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:Rally.RestApi.UiForWpf.SsoWindow.OnClosed(System.EventArgs)">
            <summary>
            Override of OnClosed to be able to indicate that the user closed the window prior to completing SSO.
            </summary>
        </member>
        <member name="M:Rally.RestApi.UiForWpf.SsoWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
